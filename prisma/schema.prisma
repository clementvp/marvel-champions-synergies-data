// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = "postgresql://root:root@localhost:3254/mc"
}

model Lang{
  id  String @id @unique
  name String
  packTypes PackTypeLang[]
  packs     PackLang[]
  factions FactionLang[]
  types        TypeLang[]
  sets         SetLang[]
  card         CardLang[]
}

model PackType {
  id           String @id @unique @default(uuid())
  code         String    
  packs        Pack[]
  langs        PackTypeLang[]

}

model PackTypeLang {
  id           String @id @unique @default(uuid())   
  name         String

  packType     PackType @relation(fields: [packTypeId], references: [id])
  packTypeId   String

  lang         Lang @relation(fields: [lang_id], references: [id])
  lang_id      String
}

model Pack {
  id           String @id @unique @default(uuid())
  code         String
  date_release String   
  position     Int
  size         Int

  type       PackType @relation(fields: [type_id], references: [id] )
  type_id    String

  cards Card[]
  langs PackLang[]

}

model PackLang {
  id           String @id @unique @default(uuid())
  name         String

  pack     Pack @relation(fields: [packId], references: [id])
  packId   String

  lang         Lang @relation(fields: [lang_id], references: [id])
  lang_id       String    
}

model Faction {
  id   String @id @unique @default(uuid())
  code String
  cards Card[]
  langs FactionLang[]
}

model FactionLang{
  id   String @id @unique @default(uuid())
  name String

  faction     Faction @relation(fields: [factionId], references: [id])
  factionId String

  lang         Lang @relation(fields: [lang_id], references: [id])
  lang_id       String 
}

model Type {
  id   String @id @unique @default(uuid())
  code String
  cards Card[]
  langs TypeLang[]
}

model TypeLang {
  id   String @id @unique @default(uuid())
  name String

  type     Type @relation(fields: [typeId], references: [id])
  typeId String
  
  lang         Lang @relation(fields: [lang_id], references: [id])
  lang_id       String
}

model Trait {
  id   String @id @unique @default(uuid())
  code String
  name String
  cards TraitsOnCards[]
}

model SetType {
  id   String @id @unique @default(uuid())
  code String
  name String
  sets Set[]
}

model Set {
  id   String @id @unique @default(uuid())
  code String
  
  type SetType @relation(fields: [type_id], references: [id])
  type_id String

  cards Card[]
  langs SetLang[]
}

model SetLang {
  id   String @id @unique @default(uuid())
  name String

  set Set @relation(fields: [set_id], references: [id])
  set_id String

  lang         Lang @relation(fields: [lang_id], references: [id])
  lang_id      String
}

model TraitsOnCards {
  id          String   @id @default(uuid())
  trait       Trait?   @relation(fields: [trait_id], references: [id])
  trait_id  String? 

  card      Card? @relation(fields: [card_id], references: [id])
  card_id String?
}

model Card {
  id          String   @id @default(uuid())
  code     String 
  imageId  String?
  quantity Int
  back_link String?
  deck_limit Int?
  defense Int?
  hand_size Int?
  health Int?
  illustrator String?
  is_unique Boolean?
  position Int?
  thwart Int?
  hidden Boolean?
  recover Int?
  attack_cost Int?
  cost String?
  resource_wild Int?
  set_position Int?
  subname String?
  thwart_cost Int?
  resource_energy Int?
  resource_physical Int?
  resource_mental Int?
  boost Int?
  base_threat Int?
  attack_text String?
  boost_text String?
  scheme_text String?
  scheme_acceleration Int?
  health_per_hero Boolean?
  stage Int?
  double_sided Boolean?
  escalation_threat Int?
  scheme_crisis Int?
  threat Int?
  scheme_hazard Int?
  scheme_boost Int?
  scheme_amplify Int?
  escalation_threat_fixed Boolean?
  back_name String?
  permanent Boolean?
  spoiler Int?
  threat_fixed Boolean?

  type        Type? @relation(fields: [type_id], references: [id])
  type_id   String?

  pack        Pack? @relation(fields: [pack_id], references: [id])
  pack_id   String?

  set        Set? @relation(fields: [set_id], references: [id])
  set_id   String?

  faction        Faction? @relation(fields: [faction_id], references: [id])
  faction_id   String?

  traits TraitsOnCards[]

  duplicatedOfId String?
  duplicatedOf   Card?   @relation("duplicate", fields: [duplicatedOfId], references: [id])
  duplicatedBy   Card[]  @relation("duplicate")

  linkedTo         Card[] @relation("linkedTo")
  linkedToRelation Card[] @relation("linkedTo")

  langs CardLang[]
}

model CardLang{
  id   String @id @unique @default(uuid())
  name String
  text String?
  flavor String?
  traits String?
  back_flavor String?
  back_text String?
  back_traits String?
  thwart_text String?

  card         Card @relation(fields: [card_id], references: [id])
  card_id      String

  lang         Lang @relation(fields: [lang_id], references: [id])
  lang_id      String
}